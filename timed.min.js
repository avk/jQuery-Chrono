/**
 * Timed, @version 1.0
 * Copyright (c) 2011 Jarvis Badgley, Arthur Klepchukov
 * https://github.com/ChiperSoft/Timed
 * Licensed under the 3-clause BSD license, Minified with Google Closure Compiler
 */
(function(h){var d={delay:4,units:"milliseconds"},c=1,e=c*1000,f=e*60,g=f*60,i=g*24,j={millisecond:c,milliseconds:c,ms:c,second:e,seconds:e,sec:e,secs:e,s:e,minute:f,minutes:f,min:f,mins:f,m:f,hour:g,hours:g,hr:g,hrs:g,h:g,day:i,days:i,d:i};function k(){var a={delay:null,units:null,when:null,callback:null},b=arguments.length;if(b<2||b>3)throw"Timed.after and Timed.every - Accept only 2 or 3 arguments";a.callback=arguments[b-1];if(typeof a.callback!=="function")throw"Timed.after and Timed.every - Require a callback as the last argument";
a.delay=typeof arguments[0]==="string"?parseFloat(arguments[0],10):arguments[0];if(typeof a.delay!=="number"||isNaN(a.delay))throw"Timed.after and Timed.every - Require a numerical delay as the 1st argument";if(typeof arguments[0]==="string"&&a.delay!==null)a.units=arguments[0].replace(/[^a-z]*/,"")||null;if(typeof arguments[1]==="string")a.units=arguments[1];if(a.units===null&&b===2)a.units=d.units;if(typeof j[a.units]!=="number")throw"Timed.after and Timed.every - Require a valid unit of time as the 2nd argument";
if(a.delay<d.delay&&a.units===d.units)a.delay=d.delay;if(a.delay<0){a.delay=d.delay;a.units=d.units}a.when=a.delay*j[a.units];return a}c={after:function a(){var b=k.apply(this,arguments);return setTimeout(b.callback,b.when)},every:function a(){var b=k.apply(this,arguments);return setInterval(b.callback,b.when)}};var l=h.Timed;c.noConflict=function(){h.Timed=l;return this};h.Timed=c})(this,document);
